import"abortcontroller-polyfill/dist/abortcontroller-polyfill-only";import{fetch as t}from"whatwg-fetch";function e(t,e,r){return new Promise((o,n)=>{function i(t,e,r,o){if(t>0){t--;const n=function({retryDelay:t,factor:e,retries:r},o){return e&&"number"==typeof e&&Number.isInteger(e)?((t,e)=>Math.pow(t,e))(e,r-o):t*(r-o)}(r,t);r.onRetry&&"function"==typeof r.onRetry&&r.onRetry({retriesLeft:t,retryDelay:n,response:o}),setTimeout(()=>s(e,r,t),n)}else n(o)}function s(t,e,r){const{retryStatus:s,fetcher:a}=e;a(t,e).then(n=>{s.includes(n.status)?i(r,t,e,n):o(n)}).catch(o=>{e.retryOnFatalError?i(r,t,e,o):n(o)})}s(e,r,t)})}let r=!1;function o(t="",o={}){const n=new AbortController;if(!(o=Object.assign({retries:1,retryDelay:1e3,retryStatus:[],retryOnFatalError:!0,fetcher:r,signal:n.signal,timeout:void 0},o)).fetcher||"function"!=typeof o.fetcher)throw new Error("tenacious-fetch: No fetch implementation found. Provide a valid fetch implementation via the fetcher configuration property.");"string"!=typeof o.retryStatus&&"number"!=typeof o.retryStatus||(o.retryStatus=[Number.parseInt(o.retryStatus)]);const i=o.timeout;return i&&Number.isInteger(i)?Promise.race([e(o.retries,t,o),new Promise((t,e)=>setTimeout(()=>{n.abort(),e(new Error(`tenacious-fetch: Request took longer than timeout of ${i} ms.`))},i))]):e(o.retries,t,o)}r=window&&window.fetch&&"signal"in new window.Request("")?window.fetch:t;export{o as default};
//# sourceMappingURL=tenacious-fetch.modern.mjs.map
